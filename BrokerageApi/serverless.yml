service: brokerage-api

frameworkVersion: '2'

provider:
  name: aws
  runtime: dotnet6
  memorySize: 2048
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2

package:
  artifact: ./bin/release/net6.0/brokerage-api.zip

functions:
  BrokerageApi:
    name: ${self:service}-${self:provider.stage}
    handler: BrokerageApi::BrokerageApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    environment:
      CONNECTION_STRING: Host=${ssm:/brokerage-api/${self:provider.stage}/postgres-hostname};Port=${ssm:/brokerage-api/${self:provider.stage}/postgres-port};Database=${ssm:/brokerage-api/${self:provider.stage}/postgres-database};Username=${ssm:/brokerage-api/${self:provider.stage}/postgres-username};Password=${ssm:/brokerage-api/${self:provider.stage}/postgres-password}
      PGTZ: UTC
    events:
      - http:
          path: /{proxy+}
          method: ANY
          private: false
          authorizer:
            arn: ${ssm:/api-authenticator/${self:provider.stage}/arn}
            type: request
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            managedExternally: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-correlation-id
            allowCredentials: false
      - http:
          path: /swagger/{proxy+}
          method: GET
          private: false
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
custom:
  vpc:
    staging:
      subnetIds:
        - subnet-0f5eeab6b619d5e1a # mosaic-stg-private-eu-west-2a
        - subnet-0d4086ab96db46047 # mosaic-stg-private-eu-west-2b
      securityGroupIds:
        - sg-080d70d1f1158f7e1 # allow_brokerage_api_db_staging_db_traffic
    production:
      subnetIds:
        - subnet-0c39cd286eeaff2b2 # Mosaic-prod-private-eu-west-2a
        - subnet-04c42d0aafb3738ad # Mosaic-prod-private-eu-west-2b
      securityGroupIds:
        - sg-0a58b8fa372b19b61 # allow_brokerage_api_db_production_db_traffic
